# -*- coding: utf-8 -*-
"""
Created on Wed Feb 20 11:20:41 2019

@author: KatreAR
"""

from fuzzywuzzy import fuzz
from itertools import combinations
import numpy 

def match_scores(listofnames, matchtype='ratio'):
    """
    Return a map of combinations and scores that denotes similarity between them. 
    The map is generated by taking combinations of 2 from the given list. 

    Input: 
    listofnames - The list of strings that you would like to compare
    matchtype - How the matching should be done, based on the options in fuzzywuzzy

    Output: 
    Map with scores for each combination in the list of strings
    """
    matchtypes = {'ratio': [fuzz.ratio],
                'partial': [fuzz.partial_ratio],
                'token': [fuzz.token_set_ratio],
                'mixed': [fuzz.ratio, fuzz.token_set_ratio]}

    scores = {}
    for combos in combinations(listofnames, 2):
        score = [subscore(combos[0], combos[1]) for subscore in matchtypes[matchtype]]
        if len(score) > 1: 
            score = (score[0] * score[1])/100.
        else:
            score = score[0]
        scores.update({combos[0]+"_"+combos[1]: score})
    return scores 

def match_scores_ind(listofnames, matchtype='ratio'):
    """ 
    Return a map of individual string similarity scores - that denotes how much each element matched 
    the others in the list. 
    """
    scores = match_scores(listofnames, matchtype=matchtype)
    score_ind = {k:[] for k in listofnames}

    """
    For each name in the list, check if the name is present in the scores returned from 
    match_scores. If the name is present (a terrible check at the moment), then append the score
    to the mapped element in score_ind
    """
    for name in listofnames:
        for keys in scores.keys():
            if name == keys.split("_")[0] or name == keys.split("_")[1]:
                score_ind[name].append(scores[keys])
    return score_ind

